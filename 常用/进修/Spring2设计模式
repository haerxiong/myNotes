Spring中的设计模式
--------------------------------------------------------------------------------
单例模式（隐藏构造方法，获取实例时总是返回同一引用）
--------------------------------------------------------------------------------
模板模式---重要
	定义：定义算法骨架，将一些步骤延迟到子类中。

	e.g.
		AbstractApplicationContext
		---ClassPathXmlApplicationContext
		---FileSystemXmlApplicationContext

		Spring加载配置文件：
			1、文件系统中的文件
			2、类路径中的文件
			3、Context
--------------------------------------------------------------------------------
建造者模式
	定义：使复杂对象的构建与表示分离，让用户在不知道对象构建细节的情况下就可以创建复杂的对象。

	e.g.
		BeanDefinition为表示，BeanDefinitionBuilder为构建。

	其他特点：命名结尾是Builder，每次设置属性后都返回this，以达到链式编码效果。Builder中包含复杂对象的成员，最后调用某一方法返回复杂对象。
--------------------------------------------------------------------------------
工厂模式
	
	意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。

	从xml或注解加载BeanDefinition，然后实例化对象
	AbstractAutowiredCapableBeanFactory
--------------------------------------------------------------------------------
责任链模式---重要
	
	定义：使多个对象都有机会处理请求，将多个对象连成一条链，并沿着这条链传递该请求。

	e.g.
		Servlet中Filter、FilterChain：
			chain保存filter数组，filter决定chain调用。
		SpringMVC中HandlerInterceptor、HandlerExecutionChain
			与Servlet类似
		Dubbo中Filter、Invoker、InvocationChain.buildInvokerChain()
			invoker封装filter，以链表的形式执行请求链。
		Mybatis中Plugin（动态代理）

		总结：Servlet、Dubbo、Mybatis对责任链模式的不同实现手段，其中Servlet是相对比较清晰，又易于实现的方式，而Dubbo和Mybatis则适合在原有代码基础上，增加责任链模式代码改动量最小的。
--------------------------------------------------------------------------------
代理模式

	定义：给某一个对象提供一个代理对象，并由代理控制原对象的引用。

	三种代理：
		静态代理
			实现相同的接口。
		动态代理
			不需要实现相同接口，但代理目标必须实现一个接口。Proxy.newProxyInstance(p1,p2,p3)
		CGLIB动态代理|子类代理
			运行期扩展，在内存中生成子类的方式进行代理。

	e.g.
		SpringWebSocket中WebsocketHandlerDecorator
		Spring AOP
--------------------------------------------------------------------------------
装饰模式

	与静态代理非常相似。

	使用代理模式的时，我们常常在一个代理类中保存一个对象的实例。
	使用装饰模式的时，我们通常将原始对象作为一个参数传给装饰者的构造器。

	装饰模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问。

	e.g.

	new DataOutputStream(new FileOutputStream(fileName))
--------------------------------------------------------------------------------
适配器模式
		Adapter类重写关注的方法，不相关的可以不管。
--------------------------------------------------------------------------------
观察者模式
		事件通知：ApplicationListener、ApplicationEventPublisher
--------------------------------------------------------------------------------
策略模式
		springMVC的HandlerMethodArgumentResolverComposite 
--------------------------------------------------------------------------------
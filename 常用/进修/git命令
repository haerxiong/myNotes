

        git checkout -- *           git reset  
工作区----------------------暂存区---------------------版本库
		git add                     git commit

---------------------------------------

SVN---集中式、Git---分布式

---------------------------------------
分支策略

	master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活

	干活都在dev分支上，每个人都有自己的分支，时不时地往dev分支上合并

	分支merge时，加上--no-ff参数，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
---------------------------------------
bug分支
	1、正在dev分支开发，突然需要紧急修复master主干bug
	2、git stash保存工作状态(git stash list可查看)
	3、切换到master，新建bug修复分支
	4、合并bug分支，切换回dev分支
	5、还原工作状态git stash pop

----------------------------------------
标签
	与分支类似，只是容易记住

--------------------------------------------------------------------------------

中文目录乱码
git config --global core.quotepath false

--------------------------------------
只获取部分代码，只要在sparse-checkout文件中指定下载目录即可：
	git config core.sparsecheckout true
	echo “libs” >> .git/info/sparse-checkout
	git pull origin master

--------------------------------------
强制覆盖本地文件
	git fetch --all  
	git reset --hard origin/master

--------------------------------------
删除远程分支
在Git v1.7.0 之后，可以使用这种语法：
git push origin --delete <branchName>
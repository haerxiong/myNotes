1、改造前：
	API网关(nginx) → 表现层(SpringMVC) → 业务逻辑层 → 数据持久层 → mysql

2、改造目标（微服务）：
	API网关(nginx) → HTTP服务(SpringMVC) → RPC服务(Thrift) → mysql


#API网关
	在SSH架构下，API网关一般是通过NGINX的rewtite模块来实现，人工维护即可。
	→
	网关路由逻辑复杂，需要调整成自动注册更新路由的方式。

	实现方式：服务注册使用zookeeper，监听zookeeper变化，修改nginx路由配置。

#服务接口调整
	注册到zookeeper

#业务逻辑层调整
	保留复杂的为RPC接口，没用的去掉。

#DAO层
	重构为RPC接口

#性能优化
	1、先写入内存数据库，再同步到持久化存储中。
	2、线上数据访问，一般不要直接从MySQL等持久化存储中出
	3、线上数据检索，检索和访问需要分开。按照关键字、时间等条件的检索，一般用Elastic来满足。
	4、线上数据列表，如最新、最热、推荐等，都需要将数据预先计算好
	5、通过这几个步骤，瓶颈应该不是在数据库或者CPU上，而是在带宽上。 那这就是砸钱的商务行为了。 这样处理，带来的最大的问题是空间浪费，是典型的以空间换时间的做法。 技术上的挑战，那就是数据一致性问题。
		数据同步办法：
			使用数据库本身自带的同步机制。
			使用公共同步工具，如阿里的canal。
			使用消息中间件来实现数据同步。
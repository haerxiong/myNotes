改造前：

	1、采用SSH架构，支付网关实现为一个大Apache Struts Action类，和支付相关的所有业务逻辑都实现在一个项目中。

	2、签约、支付、代扣、验证，都在这一个类中实现，代码行数超过1000行

	3、服务都是进程内调用，通过spring来管理各个service

	4、支付渠道，是通过抽象的接口来对网关封装渠道的差异。

问题：
	最终在这个系统中对接了有30多个渠道，类规模达到2000个。
	
	高峰期同时有5个渠道在并行开发，多个人同时修改一个项目代码导致版本控制的工作骤增。

改造方案：
	（参考Arun Gupta的微服务六种设计模式）

	#新网关设计 
		为了分解旧网关的功能， 我们设计了新的网关。在处理流程上，将其分为三个步骤，采用的是chain模式。

	#网关拆分
		代理模式。新网关接口模块是一个proxy，本身并未实现任何业务逻辑，它的工作是将用户请求发送给合适的支付产品去处理。如果这个产品还没有实现，则将其转发到老网关去执行。

	#支付产品
		聚合模式。聚合是最常见的微服务设计模式，它是一个高层次的微服务组合，供其他服务调用。 

	#支付通道

	#通知商户
		异步消息的模式

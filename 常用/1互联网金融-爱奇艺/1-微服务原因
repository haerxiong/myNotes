标题：为什么要重构到微服务

----------------------------------1次学习-----------------------------------

背景：2016年初，爱奇艺要把支付业务独立出来，10多个人，会员突破2千万。一些热片上映引发会员注册缴费的小高峰，每天订单量超百万。

原有系统是一个基于SSH架构的传统实现

struts做展示层，对数据访问层做个简单封装实现业务逻辑层，基于annotation的hibernate实现数据访问。

主要问题：

可扩展性差，性能提升困难
	web应用性能瓶颈基本都在数据库上。没有读写分离。数据量最大的表当时在5000万条数据。（技巧：没有跨表事务处理，复杂的处理，分解为多个语句来执行。）

	秒杀…每秒十万的量，超过MYSQL能承受的压力范围，需要把读操作切到内存数据库上。但是在SSH架构下，读写分离实现就得伤筋动骨了。hibernate封装了对数据库的操作，不用写SQL了，精细优化也搞不定了。

系统臃肿，学习周期长
	SSH架构，SVN版本控制，resin作为容器，Nginx前置路由。最大的一个类的规模是2000多行， 核心方法超过500行，大量重复代码， 每次调整都以失败告终。（代码臃肿、重复、格式不规范、无注释极大影响了新增人员的学习周期）

繁琐的版本控制
	新增功能，增强功能，bug修复，支持各种客户端，都在一个项目上进行,代码冲突的频率非常高。

测试成本高
	刚测试完的功能，由于分支合并冲突处理，又得重新跑一遍。

关于部署
	部署为集群，并采用jenkins来自动上线，问题不大。

关于新技术使用
	SSH框架屏蔽了其他技术的导入。缓存机制，数据库优化，读写分离等。


----------------------------------2次学习-----------------------------------

管理问题：
	人员增加了，开发效率没有增加，依赖老员工。
	产品待开发需求排了好几个月。

管理角度：
	人员划分不够细致，习惯老员工负责，新员工缺少锻炼机会。

技术角度：
	原SSH架构系统问题：Controller与Service层耦合度高。业务无法拆分，使得人力无法尽用其才。项目部署也不灵活。
	具体为：
		√√√ Controller层对Service的依赖混乱，无法评估。有些项目使用Spring getBean方法封装为一个Service，这个的使用导致无法从类调用上区分依赖关系。
		√√  Controller包含了一定的业务逻辑处理，比较臃肿。缺少针对业务的Bean，导致Service层无法处理全部业务，必须将处理延迟到Controller层。
		√   Controller层参数request等传入到了Service层，导致service无法剥离。
		√   接口会使用map作为输入输出参数，此类接口在维护时无法约束其参数。

想法：为了人尽其用，必须把复杂的项目划分成一个个小的项目，便于开发，但又要方便部署，不能增加了运维成本。我想“微服务”也就应运而生了。可以预想“微服务”的划分将是重点，划分服务的原则是使人尽其用，便于团队扩展，这有点像技术上的横向扩展。
设计模式主要分三个类型:创建型、结构型和行为型。

创建型： 5
    一、Singleton，单例模式：保证一个类只有一个实例，并提供一个访问它的全局访问点 
    二、Abstract Factory，抽象工厂：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们的具体类。 
    三、Factory Method，工厂方法：定义一个用于创建对象的接口，让子类决定实例化哪一个类，Factory Method使一个类的实例化延迟到了子类。 
    四、Builder，建造模式：将一个复杂对象的构建与他的表示相分离，使得同样的构建过程可以创建不同的表示。 
    五、Prototype，原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型来创建新的对象。

------------------------------------------------------------------------------------------------------

行为型： 11
    六、Iterator，迭代器模式：提供一个方法顺序访问一个聚合对象的各个元素，而又不需要暴露该对象的内部表示。 
    七、Observer，观察者模式：定义对象间一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知自动更新。 
    八、Template Method，模板方法：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，TemplateMethod使得子类可以不改变一个算法的结构即可以重定义该算法得某些特定步骤。 
    九、Command，命令模式：将一个请求封装为一个对象，从而使你可以用不同的请求对客户进行参数化，对请求排队和记录请求日志，以及支持可撤销的操作。 
    十、State，状态模式：允许对象在其内部状态改变时改变他的行为。对象看起来似乎改变了他的类。 
    十一、Strategy，策略模式：定义一系列的算法，把他们一个个封装起来，并使他们可以互相替换，本模式使得算法可以独立于使用它们的客户。 
    十二、Chain of Responsibility，职责链模式：使多个对象都有机会处理请求，从而避免请求的送发者和接收者之间的耦合关系 
    十三、Mediator，中介者模式：用一个中介对象封装一些列的对象交互。 
    十四、Visitor，访问者模式：表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素类的前提下定义作用于这个元素的新操作。 
    十五、Interpreter，解释器模式：给定一个语言，定义他的文法的一个表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。 
    十六、Memento，备忘录模式：在不破坏对象的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。 

------------------------------------------------------------------------------------------------------

结构型： 7
    十七、Composite，组合模式：将对象组合成树形结构以表示部分整体的关系，Composite使得用户对单个对象和组合对象的使用具有一致性。 
    十八、Facade，外观模式：为子系统中的一组接口提供一致的界面，fa?ade提供了一高层接口，这个接口使得子系统更容易使用。 
    十九、Proxy，代理模式：为其他对象提供一种代理以控制对这个对象的访问 
    二十、Adapter,适配器模式：将一类的接口转换成客户希望的另外一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作那些类可以一起工作。 
    二十一、Decorator，装饰模式：动态地给一个对象增加一些额外的职责，就增加的功能来说，Decorator模式相比生成子类更加灵活。 
    二十二、Bridge，桥模式：将抽象部分与它的实现部分相分离，使他们可以独立的变化。 
    二十三、Flyweight，享元模式


01、简单工厂：对产品抽象，生产不同产品（对象）。--------(create)
02、策略：生成不同可相互替换的算法。--------（behavior）
03、装饰：利用set方法保存一个原对象的引用，在新建类中实现功能的扩展（装饰）--------（structure）
04、代理：提供对某对象的访问支持。--------（structure）
05、工厂方法：对工厂抽象，对分支逻辑解耦。--------(create)
06、原型：clone。--------(create)
07、模版方法：多个类似的生产过程中，某个细节的具体实现不同（依赖抽象）。--------(behavior)
08、外观：为子系统的一系列接口提供更高层的接口，方便调用。--------（structure）
09、建造者：一个复杂的生成过程中，步骤顺序一定，具体实现不同，由一个对象统一控制。--------(create)
10、观察者：一个对象发生变化，通知所有监听的观察者进行变化。（注意“委托”）
11、抽象工厂：生成多个产品。--------(create)
12、状态：把庞杂的判断逻辑，转移到一系列类中。--------(behavior)
13、适配器：将一类的接口转换成客户希望的另外一个接口。--------（structure）
14、备忘录：备份对象，以便恢复其状态。--------(behavior)
15、组合：将对象组合成树型结构，使单个、组合的使用具有一致性。--------（structure）
16、迭代器：隐藏一个聚合数据的内部结构，控制访问方法、顺序。
17、单例：让类自己控制本身的实例化，返回同一个实例。--------(create)
18、桥接：将抽象部分中实现部分分离，让他们能独立变化。包括：抽象类、修正抽象类、实现类。--------（structure）
19、命令：将一个请求封装为一个对象，从而可以管理命令。--------(behavior)
20、职责链：使多个对象都有机会处理请求。--------(behavior)
21、中介者：封装一些列对象的交互。--------(behavior)
22、享元：共享对象，将大粒度的对象缩减为几个对象，原有的对象共享这几个对象（如围棋，所有棋子对象-黑白两个对象）。--------（structure）
23、解释器：用来解释特定语言的。--------(behavior)
24、访问者：新增、修改对类（前提：结构相对稳定）属性的操作，且为了不改变类，可以将类属性封装成单独的类，以参数形式传入。--------(behavior)

难点总结。
创建型：
1、工厂模式系列
2、建造者模式

结构型：
1、享元模式(应用不多)
2、桥接模式（合成/聚合关系的使用）

行为型：
1、模版方法。与建造者模式相似，只不过使用了继承（抽象类）的方式实现，而建造者则是组合的方式，因而抛弃类型而言，建造者模式更佳。
2、观察者模式。常见实现：监听器
3、命令模式。常见实现：struct2-action
4、责任链模式。一条处理链控制处理流程，每个节点实现同一接口方法，即处理办法。
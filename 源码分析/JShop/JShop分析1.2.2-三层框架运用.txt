三层框架如何使用的？

答：
	mybatis提供了sql和代码分离的功能，spring配置文件中定义了包含sql的xml文件的位置，而mybatis的sqlsession类提供了对这些xml的访问入口。
	持久层自动注入了mybatis提供的baseDao实例，以提供xml中方法的访问。

	service层impl类里则实现了对应dao实例的注入。

方向：
	分析逻辑层、持久层类的继承关系；分析配置文件含义。

1、类继承关系。
	查看front、manage包下每个业务模块的包结构，
	得知：每个模块包含至少“1个实体类、1个dao层接口和实现、1个service层接口和实现”。
	
	先看service层，
	得知：接口继承net.jeeshop.core.Services，同时知道了core包的作用。
	查看类注释可以知道其作用"该接口提供业务逻辑最基本的服务，所有的业逻辑类都必须实现此接口，这样该业务逻辑类对应的action就免去了写基本selectList、insert、update、toEdit、deletes麻烦"
	由以上注释，
	得知：Service接口是同时定义了基本操作的接口，那么他必定要有对应的实现，观察impl类知，所有的逻辑层实现类继承了类net.jeeshop.core.ServersManager。
	再进一步观察，
	得知：接口Service，接收一个泛型E extends PagerModel；类ServersManager，接收两个泛型E extends PagerModel, DAO extends  DaoManager<E>

	留意DaoManager，观察dao层，也可以从DaoManager、ServersManager入手。
	查看ServersManager
	确实实现了crud等一些基本操作，有两个变量systemManager、dao。
	systemManager不在自动扫描的范围内，那一定在spring配置文件里，查看
	得知：systemManager可能与缓存有关。
	再看另一个变量dao，查询其赋值的地方只有一个抽象的set方法，
	得知：dao由不同service层实现其赋值。
	随意查看一个service层实现，确实有setDao的实现方法，上面有注解，使用ctrl+shift+G搜索发现，没有显示调用setDao的地方，
	得知：setDao可能是注解方式注入的。
	全局搜索一个@Resource的name值，发现同dao层impl类的name相同，
	得知：逻辑层impl实现类，要实现setDao方法，并使用@Resource注解，把对应的持久层实现类注入进来。
	查看DaoManager注释，
	得知：所有的持久层都实现DaoManager接口

	再看dao层，
	得知：持久层不仅实现了DaoManager接口,还保存有一个继承了org.mybatis.spring.support.SqlSessionDaoSupport的BaseDao（注释：封装mybatis最基本的数据库操作）
	观察各个方法，
	得知：底层实现使用了org.apache.ibatis.session.SqlSession的方法，应补充相关知识。
	回到daoImpl观察baseDao的引入，
	得知：baseDao也是spring配置文件中定义的，接收一个变量sqlSessionFactory

	由上得知了本系统主要类继承关系，但是仍然无法建立dao层代码同xml中sql的联系，其实daoImpl的代码还没有看完，查看每个查询方法的实现，发现sqlsession接收的除了参数外，都是字符串，仔细观察发现同xml中包的结构相似，名字又非常像每个sql语句的id，由此不难预测关联关系就是这样建立的，本质上是org.apache.ibatis.session.SqlSession的方法调用，则百度其api。

2、查看配置即相关api
	ps:接触一个新框架，难免都会遇到不了解的知识，mybatis的这种配置方法我也没见过，只要掌握了原理，分析、推理后就能知道个大概，再百度一下就OK了。

	其实，已经猜的差不多了。
	我们可以通过百度、或者实际操作来验证一下，如果有时间翻看org.apache.ibatis.session.SqlSession的源码当然更好了。

	各种搜，找到了api文档：
	http://tool.oschina.net/uploads/apidocs/mybatis-3.1.1/org/apache/ibatis/session/SqlSession.html

三层框架的基本操作是怎么样的？
答：
	表示层位于net.jeeshop.web.action，拦截全部请求；
		静态资源位于/resource/**,/attached/**，并设有缓存时间。
		视图由freemaker和jsp组成。
	逻辑层位于net.jeeshop.services.*.impl.*
	持久层
		xml位于classpath*:/config/**/*.xml

疑问：
	持久层bean何时扫描、加载的？
	持久层如何使用的？
	持久层同mapper.xml如何建立联系的？

1、查看springMVC配置，确定映射的方式。
	springMVC是servlet，应该查看web.xml，
	得知：配置文件为classpath*:spring/spring-mvc.xml
	ctrl+f搜索"scan"，一般为自动扫描某个包路径下的代码。
	得知：表示层代码位于net.jeeshop.web.action

	再次查看web.xml
	得知：springMVC拦截"/",即所有访问路径

	理解springMVC原理后，在配置文件中，搜索Resolver
	得知：有jsp、freemaker两种主要的解析器，顺序为order更小的优先，即freemaker优先

	其次，经验得知：
	查看mvc:resources，为静态资源的目录，此目录不受springMVC拦截，并设置了相应的缓存时间。

2、查看service层（业务逻辑层）扫描的路径，一般都是注解，自动注入的。
	查看配置文件，
	得知：配置文件由5部分构成，其中极可能含有缓存配置。

	一般查看spring配置文件，搜索"scan"查看，然而未发现，仔细查看，
	得知：aop:config中配置了逻辑层的路径，为execution(public * net.jeeshop.services.*.impl.*.*(..))

3、查看dao层是如何调用sql的。
	查看spring配置文件，由dataSource数据源顺藤摸瓜，
	得知：Mybatis配置文件是classpath:mybatis-config.xml、映射路径是classpath*:/config/**/*.xml

	查看mybatis-config.xml，查看名称
	得知：可能统一做了小写处理，没有其他配置了。

4、总结。
	分析以上，还不能确切的得知三层是如何运转的。
	进一步观察：包结构、类命名，找一条线路捋一遍。例如：

	web.action下包含front、manage，应该是前后台代码位置。
	打开front.product.ProductAction.java，包含一些service层变量和一些方法，寻找一个service层的调用，
	得知：service基于baseDao类进行操作。

	由此分析知，结构相对复杂，还需要其他途径对代码结构进行确认。
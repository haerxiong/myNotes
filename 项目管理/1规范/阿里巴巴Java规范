15.【参考】各层命名规约：
A) Service/DAO 层方法命名规约
1） 获取单个对象的方法用 get 做前缀。
2） 获取多个对象的方法用 list 做前缀。
3） 获取统计值的方法用 count 做前缀。
4） 插入的方法用 save（推荐）或 insert 做前缀。
5） 删除的方法用 remove（推荐）或 delete 做前缀。
6） 修改的方法用 update 做前缀。
B) 领域模型命名规约
1） 数据对象：xxxDO，xxx 即为数据表名。
2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。
3） 展示对象：xxxVO，xxx 一般为网页名称。
4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。

-------------------------------------

常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包
内共享常量、类内共享常量。
1） 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 const 目录下。
2） 应用内共享常量：放置在一方库的 modules 中的 const 目录下。
3） 子工程内部共享常量：即在当前子工程的 const 目录下。
4） 包内共享常量：即在当前包下单独的 const 目录下。
5） 类内共享常量：直接在类内部 private static final 定义。

一方库：本工程中的各模块的相互依赖
二方库：公司内部的依赖库，一般指公司内部的其他项目发布的jar包
三方库：公司之外的开源库， 比如apache、ibm、google等发布的依赖

-------------------------------------

关于基本数据类型与包装数据类型的使用标准如下：
1） 所有的 POJO 类属性必须使用包装数据类型。
2） RPC 方法的返回值和参数必须使用包装数据类型。
3） 所有的局部变量推荐使用基本数据类型。

-------------------------------------

定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。

-------------------------------------

POJO 类必须写 toString 方法。使用工具类 source> generate toString 时，如果继
承了另一个 POJO 类，注意在前面加一下 super.toString。

-------------------------------------
